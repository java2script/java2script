
package test;

import java.math.BigInteger;
import java.util.Arrays;

//import test.math.BigInteger;
//import test.math.MutableBigInteger;

public class Test_BigInt extends Test_ {

	public static void main(String[] args) {

		BigInteger n = new BigInteger("10473");
		BigInteger exp = new BigInteger("9261");
		BigInteger mod = new BigInteger("17947");
		BigInteger p = n.modPow(exp, mod);
//		System.out.println(p.toString()); // 815 but is 3908

		int v = 0;
		// for 10473, 29
//		n = new BigInteger("14");
//		exp = new BigInteger("3");
		 n = new BigInteger("10473");
		 exp = new BigInteger("9261");
		// first failure is 2195, giving 197 in JS and 1658 in Java
		// also 2287, 2431, 2443, 2455, and several more
		for (int i = 1; i < 3000; i++) {
			mod = BigInteger.valueOf(i);
			p = n.modPow(exp, mod);
			v += p.intValue();
			System.out.println(i + "." + p.toString());// + "\t" + v);
//			System.out.println(Arrays.toString(p.toByteArray()));
		}
		System.out.println(v);
		if (true)
			return;
//		// working with full long support. 

		// three tweaks needed:

		// 1) MutableBigInteger.compare explicit int check (x)|0
		// 2) MutableBigInteger.inverseMod32 requires long rather than int for Newton's
		// method
		// 1) BigInteger needs alias valueOf for toString;
		testModPow();
		testShift();
		testSub();
		testLong();
		testPow10();
		testBI();
		testMulOdd();
		testMulEven();
		testModPow2();

		// test.math.BigInteger only:

//		testInverseMod();
//		testDiv3();
//		testSquare();

	}

	private static void testLong() {
		System.out.println("testLong");
		BigInteger bi = new BigInteger("18446744073709551616");
		assert (bi.toString().equals("18446744073709551616"));
		long l = -0x20000000000000L;
		l = 0x20000000000000L;
		l = -1;
		for (int i = 0; i < 50; i++, l *= 2) {
			String su = Long.toUnsignedString(l);
			BigInteger bi1 = BigInteger.valueOf(l);
			String sbi = bi1.add(bi).toString();
			String ss = (i + " " + l + " " + su + " " + sbi + " " + Long.toUnsignedString(l).length() + "  "
					+ su.equals(sbi));
			System.out.println(ss);
			assert (su.equals(sbi));
			assert (sLongOK.indexOf(ss) >= 0);
		}
		System.out.println("testLong OK");
	}

	private static void testSub() {
		System.out.println("testSub");
		Long l = 100000000000L;
		l = 100000000L;
		for (int i = 1; i < 100; i++) {
			BigInteger m = BigInteger.valueOf(l);
			BigInteger n = BigInteger.valueOf(l * i);
			BigInteger mi = BigInteger.valueOf(i);
			BigInteger m1 = n.divide(mi);
			assert (m1.equals(m));
		}
		for (int i = -100; i < 100; i++) {
			BigInteger m = BigInteger.valueOf(l);
			BigInteger n = BigInteger.valueOf(l + i);
			BigInteger mi = BigInteger.valueOf(i);
			BigInteger m1 = n.subtract(mi);
			assert (m1.equals(m));
		}
		for (int i = 0; i < 100; i++) {

			long r1 = (long) (Math.random() * 10000000000000L);
			long r2 = (long) (Math.random() * 10000000000000L);

//			r1=
//			8251732205720L;
//			r2=
//			488710243863L;
			BigInteger m = BigInteger.valueOf(r1);
			BigInteger n = BigInteger.valueOf(r2);
			BigInteger mm = m.multiply(m);
			BigInteger ms = mm.subtract(n);
			BigInteger m1 = ms.add(n);
			BigInteger md = m1.divide(m);
//			System.out.println(m + " " + n + " *=" + mm + " -=" + ms + "\n +=" + m1 + " /=" + md);
			assert (md.equals(m));
//			break;
		}
		System.out.println("testSub OK");
	}

	private static void testPow10() {
		System.out.println("testPow10");
		BigInteger m = BigInteger.ONE;
		String s = "1";
		for (int i = 0; i < 100; i++) {
			m = m.multiply(BigInteger.TEN);
			System.out.println(i + "." + m);
			s += "0";
			assert (m.toString().equals(s));
		}
		System.out.println("testPow10 OK");
	}

//	private static void testCalendar() {
//		GregorianCalendar gc = new GregorianCalendar(2019, 3, 1, 2, 3, 4, 567);
//		System.out.println(gc);
//		XMLGregorianCalendarImpl cc = new XMLGregorianCalendarImpl(gc);
//		String ccf = cc.toXMLFormat();
//		System.out.println(ccf.toString());
//		assert (ccf.toString().indexOf(":03:04.567") >= 0);
//		System.out.println("testCalendar OK");
//	}

	private static void testBI() {
		System.out.println("testBI");
		BigInteger b = BigInteger.valueOf(25);
		BigInteger c = new BigInteger("12345678901234567");// BigInteger.valueOf(2000);
		System.out.println(c);
		BigInteger d = b.add(c);
		System.out.println(d);
		System.out.println(d.toString(2));
		d = d.multiply(c);
		System.out.println(d.toString(2));
		d = d.multiply(c);
		System.out.println(d);
		System.out.println(d.toString(2));
		d = d.multiply(c);
		System.out.println(d.toString(2));

		test("192000000000000000000");
		BigInteger b1;
		test("96000000000000000000");
		b1 = new BigInteger("96000000000000000000");
		System.out.println(b1.toString(10));
//		System.out.println(b1.toString(16));
//		System.out.println(b1.toString(2));
		b1 = b1.multiply(BigInteger.valueOf(2));
		System.out.println(b1.toString(10));
//		System.out.println(b1.toString(16));
//		System.out.println(b1.toString(2));
		b1 = b1.multiply(BigInteger.valueOf(2));
		System.out.println(b1.toString(10));
//		System.out.println(b1.toString(16));
//		System.out.println(b1.toString(2));
		b1 = b1.multiply(BigInteger.valueOf(2));
		System.out.println(b1.toString(10));
//		System.out.println(b1.toString(16));
//		System.out.println(b1.toString(2));
		b1 = b1.multiply(BigInteger.valueOf(2));
		System.out.println(b1.toString(10));
//		System.out.println(b1.toString(16));
//		System.out.println(b1.toString(2));
		b1 = b1.multiply(BigInteger.valueOf(5));
		System.out.println(b1.toString(10));
//		System.out.println(b1.toString(16));
//		System.out.println(b1.toString(2));
		assert b1.toString(10).equals("7680000000000000000000");
		b = BigInteger.valueOf(25);
		b1 = b1.multiply(b);
		System.out.println(b1.toString(10));
//		System.out.println(b1.toString(16));
//		System.out.println(b1.toString(2));

		d = d.multiply(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		d = d.multiply(c);
		System.out.println(d);
		d = d.multiply(c);
		System.out.println(d);
		d = d.multiply(c);
		System.out.println(d);
		d = d.multiply(c);
		System.out.println(d);
		assert (d.toString().equals(
				"539659488879945019969144096149744253082822996305278833191693886734593196177571980115737100546042293708933808976540048777354725216"));
		d = d.divide(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		d = d.divide(c);
		System.out.println(d);
		assert (d.toString().equals("1"));

		System.out.println("testBigInt OK");
	}

	private static void testMulOdd() {
		System.out.println("testMulOdd");
		BigInteger x = new BigInteger("7");
		BigInteger y = new BigInteger("13");
		for (int i = 0; i < 100; i++) {
			BigInteger z = x.multiply(y);
			String s = i + "." + z.toString();
			System.out.println(s);
			assert (z.divide(y).equals(x));
			assert (z.divide(x).equals(y));
			assert (s.equals(multest[i]));
			x = z;
		}
		System.out.println("testBDMulOdd OK");
	}

	private static void testMulEven() {
		System.out.println("testMulEven");
		BigInteger x = new BigInteger("6");
		BigInteger y = new BigInteger("18");
		for (int i = 0; i < 100; i++) {
			BigInteger z = x.multiply(y);
			String s = i + "." + z.toString();
			System.out.println(s);
			assert (z.divide(y).equals(x));
			assert (z.divide(x).equals(y));
			assert (s.equals(multest[i + 100]));
			x = z;
		}
		System.out.println("testBDMulEven OK");
	}

	private static void testModPow() {
		System.out.println("testModPow");
		int v = 7;
		int n = 5;
		BigInteger m = BigInteger.valueOf(v);
		for (int i = 0; i <= 4/* 100 */; i++) {
			BigInteger bi = BigInteger.valueOf(i);
			BigInteger bn = BigInteger.valueOf(n);
			if (i == 3)
				System.out.println(bi + " " + bn);
			BigInteger bp = m.modPow(bi, bn);
			String s = i + "." + bp + "." + m.pow(i);
			System.out.println(s);
			assert (s.equals(modPowTest[i]));
		}
		System.out.println("testModPow OK");
	}

	private static void testModPow2() {
		System.out.println("testModPow2");
		int v = 9;
		int n = 6;
		BigInteger m = BigInteger.valueOf(v);
		for (int i = 0; i <= 100; i++) {

			String s = i + "." + m.modPow(BigInteger.valueOf(i), BigInteger.valueOf(i + n)) + "." + m.pow(i);
			System.out.println(s + " = " + m + ".modPow(" + i + "," + (i + n) + ")");
			System.out.println(modPowTest2[i]);
			assert (s.equals(modPowTest2[i]));
		}
		System.out.println("testModPow2 OK");
	}

	/**
	 * Ensure m.shiftLeft(n).shiftRight(n) == m
	 * 
	 * @param m
	 */
	private static void testShift() {
		System.out.println("testShift");
		BigInteger m = BigInteger.valueOf(7).pow(63);
		assert (m.toString().equals("174251498233690814305510551794710260107945042018748343"));
		for (int i = 0; i < 100; i++) {
			BigInteger r = m.shiftLeft(i).shiftRight(i);
//			System.out.println(r);
			assert (r.equals(m));
		}
		System.out.println("testShift OK");
	}

	private static void test(String s) {
//		dumpBytes(BigInteger.valueOf(3));
//		dumpBytes(3);
//		dumpBytes(BigInteger.valueOf(30));
//		dumpBytes(30);
//		dumpBytes(BigInteger.valueOf(300));
//		dumpBytes(300);
//		dumpBytes(BigInteger.valueOf(3000));
//		dumpBytes(3000);
//		dumpBytes(BigInteger.valueOf(30000));
//		dumpBytes(30000);
//		dumpBytes(BigInteger.valueOf(300000));
//		dumpBytes(300000);
		System.out.println(s);
		BigInteger b = new BigInteger(s);
		System.out.println("bigint b = ");
		dumpBytes(b);
		System.out.println(b);
		System.out.println(b.toString(16));
		assert (b.toString().equals(s));
	}

	private static void dumpRadixTable() {
		long max = 0x7FFFFFFFFFFFFFFFL;
		for (int n = 2; n <= 36; n++) {
			int pow = 0;
			long v, val = 0;
			for (int p = 0; (v = (long) Math.pow(n, p)) < max && v > 0; p++) {
				pow = p;
				val = v;
			}
			System.out.println("// " + n + "\t" + pow + "\t" + Long.toHexString(val));
		}
	}

	private static void dumpRadixTable48() {
		long max = 0xFFFFFFFFFFFFL;
		String s1 = "";
		String s2 = "";
		for (int n = 2; n <= 36; n++) {
			int pow = 0;
			long v, val = 0;
			for (int p = 0; (v = (long) Math.pow(n, p)) <= max && v > 0; p++) {
				pow = p;
				val = v;
			}
			System.out.println("// " + n + "\t" + pow + "\t" + Long.toHexString(val));
			s1 += "/* " + n + " */ " + pow + ", ";
			s2 += "/* " + n + " */ valueOf(0x" + Long.toHexString(val / (1L << 32)) + ",0x"
					+ Long.toHexString(val % (1L << 32)) + "), \n";
		}
		System.out.println(s1);
		System.out.println(s2);
	}

	private static void dumpBytes(BigInteger b) {
		byte[] bb = b.toByteArray();
		System.out.println(b + " " + b.bitCount() + "  " + b.bitLength());
		for (int i = 0, j = 0; i < bb.length; i++, j += 8) {
			int bi = bb[i];
			if (bi < 0)
				bi = 256 + bi;
			String s = "00000000" + Integer.toBinaryString(bi);
			System.out.print(s.substring(s.length() - 8) + (j == 24 ? "\n" : " "));
		}
		System.out.println("\n");

		// TODO Auto-generated method stub

	}

	private static void dumpBytes(long l) {
		String s = "0000000000000000000000000000000000000000000000000000000000000000000000" + Long.toBinaryString(l);
		s = s.substring(s.length() - 64);
		for (int j = 0; j < 64; j += 8)
			System.out.print(s.substring(j, j + 8) + (j == 24 ? "\n" : " "));
		System.out.println("\n");
	}

	final static String[] modPowTest = new String[] { "0.1.1", "1.2.7", "2.4.49", "3.3.343", "4.1.2401", "5.2.16807",
			"6.4.117649", "7.3.823543", "8.1.5764801", "9.2.40353607", "10.4.282475249", "11.3.1977326743",
			"12.1.13841287201", "13.2.96889010407", "14.4.678223072849", "15.3.4747561509943", "16.1.33232930569601",
			"17.2.232630513987207", "18.4.1628413597910449", "19.3.11398895185373143", "20.1.79792266297612001",
			"21.2.558545864083284007", "22.4.3909821048582988049", "23.3.27368747340080916343",
			"24.1.191581231380566414401", "25.2.1341068619663964900807", "26.4.9387480337647754305649",
			"27.3.65712362363534280139543", "28.1.459986536544739960976801", "29.2.3219905755813179726837607",
			"30.4.22539340290692258087863249", "31.3.157775382034845806615042743", "32.1.1104427674243920646305299201",
			"33.2.7730993719707444524137094407", "34.4.54116956037952111668959660849",
			"35.3.378818692265664781682717625943", "36.1.2651730845859653471779023381601",
			"37.2.18562115921017574302453163671207", "38.4.129934811447123020117172145698449",
			"39.3.909543680129861140820205019889143", "40.1.6366805760909027985741435139224001",
			"41.2.44567640326363195900190045974568007", "42.4.311973482284542371301330321821976049",
			"43.3.2183814375991796599109312252753832343", "44.1.15286700631942576193765185769276826401",
			"45.2.107006904423598033356356300384937784807", "46.4.749048330965186233494494102694564493649",
			"47.3.5243338316756303634461458718861951455543", "48.1.36703368217294125441230211032033660188801",
			"49.2.256923577521058878088611477224235621321607", "50.4.1798465042647412146620280340569649349251249",
			"51.3.12589255298531885026341962383987545444758743", "52.1.88124787089723195184393736687912818113311201",
			"53.2.616873509628062366290756156815389726793178407", "54.4.4318114567396436564035293097707728087552248849",
			"55.3.30226801971775055948247051683954096612865741943",
			"56.1.211587613802425391637729361787678676290060193601",
			"57.2.1481113296616977741464105532513750734030421355207",
			"58.4.10367793076318844190248738727596255138212949486449",
			"59.3.72574551534231909331741171093173785967490646405143",
			"60.1.508021860739623365322188197652216501772434524836001",
			"61.2.3556153025177363557255317383565515512407041673852007",
			"62.4.24893071176241544900787221684958608586849291716964049",
			"63.3.174251498233690814305510551794710260107945042018748343",
			"64.1.1219760487635835700138573862562971820755615294131238401",
			"65.2.8538323413450849900970017037940802745289307058918668807",
			"66.4.59768263894155949306790119265585619217025149412430681649",
			"67.3.418377847259091645147530834859099334519176045887014771543",
			"68.1.2928644930813641516032715844013695341634232321209103400801",
			"69.2.20500514515695490612229010908095867391439626248463723805607",
			"70.4.143503601609868434285603076356671071740077383739246066639249",
			"71.3.1004525211269079039999221534496697502180541686174722466474743",
			"72.1.7031676478883553279994550741476882515263791803223057265323201",
			"73.2.49221735352184872959961855190338177606846542622561400857262407",
			"74.4.344552147465294110719732986332367243247925798357929806000836849",
			"75.3.2411865032257058775038130904326570702735480588505508642005857943",
			"76.1.16883055225799411425266916330285994919148364119538560494041005601",
			"77.2.118181386580595879976868414312001964434038548836769923458287039207",
			"78.4.827269706064171159838078900184013751038269841857389464208009274449",
			"79.3.5790887942449198118866552301288096257267888893001726249456064921143",
			"80.1.40536215597144386832065866109016673800875222251012083746192454448001",
			"81.2.283753509180010707824461062763116716606126555757084586223347181136007",
			"82.4.1986274564260074954771227439341817016242885890299592103563430267952049",
			"83.3.13903921949820524683398592075392719113700201232097144724944011875664343",
			"84.1.97327453648743672783790144527749033795901408624680013074608083129650401",
			"85.2.681292175541205709486531011694243236571309860372760091522256581907552807",
			"86.4.4769045228788439966405717081859702655999169022609320640655796073352869649",
			"87.3.33383316601519079764840019573017918591994183158265244484590572513470087543",
			"88.1.233683216210633558353880137011125430143959282107856711392134007594290612801",
			"89.2.1635782513474434908477160959077878011007714974754996979744938053160034289607",
			"90.4.11450477594321044359340126713545146077054004823284978858214566372120240027249",
			"91.3.80153343160247310515380886994816022539378033762994852007501964604841680190743",
			"92.1.561073402121731173607666208963712157775646236340963964052513752233891761335201",
			"93.2.3927513814852118215253663462745985104429523654386747748367596265637242329346407",
			"94.4.27492596703964827506775644239221895731006665580707234238573173859460696305424849",
			"95.3.192448176927753792547429509674553270117046659064950639670012217016224874137973943",
			"96.1.1347137238494276547832006567721872890819326613454654477690085519113574118965817601",
			"97.2.9429960669459935834824045974053110235735286294182581343830598633795018832760723207",
			"98.4.66009724686219550843768321818371771650147004059278069406814190436565131829325062449",
			"99.3.462068072803536855906378252728602401551029028414946485847699333055955922805275437143",
			"100.1.3234476509624757991344647769100216810857203198904625400933895331391691459636928060001" };

	final static String[] modPowTest2 = new String[] { "0.1.1", "1.2.9", "2.1.81", "3.0.729", "4.1.6561", "5.1.59049",
			"6.9.531441", "7.9.4782969", "8.11.43046721", "9.9.387420489", "10.1.3486784401", "11.15.31381059609",
			"12.9.282429536481", "13.6.2541865828329", "14.1.22876792454961", "15.15.205891132094649",
			"16.9.1853020188851841", "17.3.16677181699666569", "18.9.150094635296999121", "19.14.1350851717672992089",
			"20.3.12157665459056928801", "21.0.109418989131512359209", "22.9.984770902183611232881",
			"23.6.8862938119652501095929", "24.21.79766443076872509863361", "25.5.717897987691852588770249",
			"26.17.6461081889226673298932241", "27.15.58149737003040059690390169", "28.33.523347633027360537213511521",
			"29.4.4710128697246244834921603689", "30.9.42391158275216203514294433201",
			"31.12.381520424476945831628649898809", "32.35.3433683820292512484657849089281",
			"33.27.30903154382632612361920641803529", "34.1.278128389443693511257285776231761",
			"35.32.2503155504993241601315571986085849", "36.15.22528399544939174411840147874772641",
			"37.13.202755595904452569706561330872953769", "38.25.1824800363140073127359051977856583921",
			"39.9.16423203268260658146231467800709255289", "40.27.147808829414345923316083210206383297601",
			"41.36.1330279464729113309844748891857449678409", "42.33.11972515182562019788602740026717047105681",
			"43.9.107752636643058178097424660240453423951129", "44.11.969773729787523602876821942164080815560161",
			"45.42.8727963568087712425891397479476727340041449", "46.9.78551672112789411833022577315290546060373041",
			"47.38.706965049015104706497203195837614914543357369",
			"48.27.6362685441135942358474828762538534230890216321",
			"49.49.57264168970223481226273458862846808078011946889",
			"50.25.515377520732011331036461129765621272702107522001",
			"51.30.4638397686588101979328150167890591454318967698009",
			"52.25.41745579179292917813953351511015323088870709282081",
			"53.53.375710212613636260325580163599137907799836383538729",
			"54.21.3381391913522726342930221472392241170198527451848561",
			"55.1.30432527221704537086371993251530170531786747066637049",
			"56.45.273892744995340833777347939263771534786080723599733441",
			"57.36.2465034704958067503996131453373943813074726512397600969",
			"58.17.22185312344622607535965183080365494317672538611578408721",
			"59.29.199667811101603467823686647723289448859052847504205678489",
			"60.45.1797010299914431210413179829509605039731475627537851106401",
			"61.64.16173092699229880893718618465586445357583280647840659957609",
			"62.21.145557834293068928043467566190278008218249525830565939618481",
			"63.36.1310020508637620352391208095712502073964245732475093456566329",
			"64.51.11790184577738583171520872861412518665678211592275841109096961",
			"65.37.106111661199647248543687855752712667991103904330482569981872649",
			"66.9.955004950796825236893190701774414011919935138974343129836853841",
			"67.9.8595044557171427132038716315969726107279416250769088168531684569",
			"68.71.77355401014542844188348446843727534965514746256921793516785161121",
			"69.39.696198609130885597695136021593547814689632716312296141651066450089",
			"70.61.6265787482177970379256224194341930332206694446810665274859598050801",
			"71.53.56392087339601733413306017749077372989860250021295987473736382457209",
			"72.27.507528786056415600719754159741696356908742250191663887263627442114881",
			"73.11.4567759074507740406477787437675267212178680251724974985372646979033929",
			"74.1.41109831670569663658300086939077404909608122265524774868353822811305361",
			"75.0.369988485035126972924700782451696644186473100389722973815184405301748249",
			"76.1.3329896365316142756322307042065269797678257903507506764336659647715734241",
			"77.30.29969067287845284806900763378587428179104321131567560879029936829441608169",
			"78.57.269721605590607563262106870407286853611938890184108047911269431464974473521",
			"79.19.2427494450315468069358961833665581682507450011656972431201424883184770261689",
			"80.31.21847450052839212624230656502990235142567050104912751880812823948662932355201",
			"81.51.196627050475552913618075908526912116283103450944214766927315415537966391196809",
			"82.81.1769643454279976222562683176742209046547931058497932902345838739841697520771281",
			"83.53.15926791088519786003064148590679881418931379526481396121112548658575277686941529",
			"84.81.143341119796678074027577337316118932770382415738332565090012937927177499182473761",
			"85.9.1290070078170102666248196035845070394933441741644993085810116441344597492642263849",
			"86.25.11610630703530923996233764322605633554400975674804937772291047972101377433780374641",
			"87.33.104495676331778315966103878903450701989608781073244439950619431748912396904023371769",
			"88.89.940461086986004843694934910131056317906479029659199959555574885740211572136210345921",
			"89.74.8464149782874043593254414191179506861158311266932799636000173971661904149225893113289",
			"90.81.76177348045866392339289727720615561750424801402395196724001565744957137343033038019601",
			"91.4.685596132412797531053607549485540055753823212621556770516014091704614236087297342176409",
			"92.25.6170365191715177779482467945369860501784408913594010934644126825341528124785676079587681",
			"93.36.55533286725436600015342211508328744516059680222346098411797141428073753123071084716289129",
			"94.61.499799580528929400138079903574958700644537122001114885706174272852663778107639762446602161",
			"95.14.4498196224760364601242719132174628305800834098010033971355568455673974002968757862019419449",
			"96.69.40483766022843281411184472189571654752207506882090305742200116101065766026718820758174775041",
			"97.79.364353894205589532700660249706144892769867561938812751679801044909591894240469386823572975369",
			"98.81.3279185047850305794305942247355304034928808057449314765118209404186327048164224481412156778321",
			"99.99.29512665430652752148753480226197736314359272517043832886063884637676943433478020332709411004889",
			"100.77.265613988875874769338781322035779626829233452653394495974574961739092490901302182994384699044001", };

	final static String[] multest = new String[] { "0.91", "1.1183", "2.15379", "3.199927", "4.2599051", "5.33787663",
			"6.439239619", "7.5710115047", "8.74231495611", "9.965009442943", "10.12545122758259", "11.163086595857367",
			"12.2120125746145771", "13.27561634699895023", "14.358301251098635299", "15.4657916264282258887",
			"16.60552911435669365531", "17.787187848663701751903", "18.10233442032628122774739",
			"19.133034746424165596071607", "20.1729451703514152748930891", "21.22482872145683985736101583",
			"22.292277337893891814569320579", "23.3799605392620593589401167527", "24.49394870104067716662215177851",
			"25.642133311352880316608797312063", "26.8347733047587444115914365056819",
			"27.108520529618636773506886745738647", "28.1410766885042278055589527694602411",
			"29.18339969505549614722663860029831343", "30.238419603572144991394630180387807459",
			"31.3099454846437884888130192345041496967", "32.40292913003692503545692500485539460571",
			"33.523807869048002546094002506312012987423", "34.6809502297624033099222032582056168836499",
			"35.88523529869112430289886423566730194874487", "36.1150805888298461593768523506367492533368331",
			"37.14960476547880000718990805582777402933788303", "38.194486195122440009346880472576106238139247939",
			"39.2528320536591720121509446143489381095810223207", "40.32868166975692361579622799865361954245532901691",
			"41.427286170684000700535096398249705405191927721983",
			"42.5554720218892009106956253177246170267495060385779",
			"43.72211362845596118390431291304200213477435785015127",
			"44.938747716992749539075606786954602775206665205196651",
			"45.12203720320905744007982888230409836077686647667556463",
			"46.158648364171774672103777546995327869009926419678234019",
			"47.2062428734233070737349108110939262297129043455817042247",
			"48.26811573545029919585538405442210409862677564925621549211",
			"49.348550456085388954611999270748735328214808344033080139743",
			"50.4531155929110056409955990519733559266792508472430041816659",
			"51.58905027078430733329427876756536270468302610141590543616567",
			"52.765765352019599533282562397834971516087933931840677067015371",
			"53.9954949576254793932673311171854629709143141113928801871199823",
			"54.129414344491312321124753045234110186218860834481074424325597699",
			"55.1682386478387060174621789588043432420845190848253967516232770087",
			"56.21871024219031782270083264644564621470987481027301577711026011131",
			"57.284323314847413169511082440379340079122837253354920510243338144703",
			"58.3696203093016371203644071724931421028596884293613966633163395881139",
			"59.48050640209212825647372932424108473371759495816981566231124146454807",
			"60.624658322719766733415848121513410153832873445620760361004613903912491",
			"61.8120558195356967534406025579674331999827354793069884693059980750862383",
			"62.105567256539640577947278332535766315997755612309908501009779749761210979",
			"63.1372374335015327513314618322964962107970822960028810513127136746895742727",
			"64.17840866355199257673090038198544507403620698480374536670652777709644655451",
			"65.231931262617590349750170496581078596247069080244868976718486110225380520863",
			"66.3015106414028674546752216455554021751211898043183296697340319432929946771219",
			"67.39196383382372769107778813922202282765754674561382857065424152628089308025847",
			"68.509552983970845998401124580988629675954810769297977141850513984165161004336011",
			"69.6624188791620997979214619552852185787412540000873702844056681794147093056368143",
			"70.86114454291072973729790054187078415236363020011358136972736863323912209732785859",
			"71.1119487905783948658487270704432019398072719260147655780645579223210858726526216167",
			"72.14553342775191332560334519157616252174945350381919525148392529901741163444840810171",
			"73.189193456077487323284348749049011278274289554964953826929102888722635124782930532223",
			"74.2459514929007335202696533737637146617565764214544399750078337553394256622178096918899",
			"75.31973694077095357635054938589282906028354934789077196751018388194125336088315259945687",
			"76.415658023002239649255714201660677778368614152258003557763239046523629369148098379293931",
			"77.5403554299029115440324284621588811118791983979354046250922107604807181798925278930821103",
			"78.70246205887378500724215700080654544544295791731602601261987398862493363386028626100674339",
			"79.913200676535920509414804101048509079075845292510833816405836185212413724018372139308766407",
			"80.11871608794966966622392453313630618027985988802640839613275870407761378412238837811013963291",
			"81.154330914334570566091101893077198034363817854434330914972586315300897919359104891543181522783",
			"82.2006301886349417359184324610003574446729632107646301894643622098911672951668363590061359796179",
			"83.26081924522542425669396219930046467807485217399401924630367087285851748371688726670797677350327",
			"84.339065018793051533702150859090604081497307826192225020194772134716072728831953446720369805554251",
			"85.4407845244309669938127961168177853059465001740498925262532037751308945474815394807364807472205263",
			"86.57301988176025709195663495186312089773045022626486028412916490767016291172600132495742497138668419",
			"87.744925846288334219543625437422057167049585294144318369367914379971211785243801722444652462802689447",
			"88.9684036001748344854067130686486743171644608823876138801782886939625753208169422391780482016434962811",
			"89.125892468022728483102872698924327661231379914710389804423177530215134791706202491093146266213654516543",
			"90.1636602084295470280337345086016259596007938891235067457501307892796752292180632384210901460777508715059",
			"91.21275827095841113644385486118211374748103205586055876947517002606357779798348220994741718990107613295767",
			"92.276585752245934477377011319536747871725341672618726400317721033882651137378526872931642346871398972844971",
			"93.3595614779197148205901147153977722332429441744043443204130373440474464785920849348111350509328186646984623",
			"94.46742992129562926676714913001710390321582742672564761653694854726168042216971041525447556621266426410800099",
			"95.607658897684318046797293869022235074180575654743341901498033111440184548820623539830818236076463543340401287",
			"96.7899565669896134608364820297289055964347483511663444719474430448722399134668106017800637068994026063425216731",
			"97.102694353708649749908742663864757727536517285651624781353167595833391188750685378231408281896922338824527817503",
			"98.1335026598212446748813654630241850457974724713471122157591178745834085453758909917008307664659990404718861627539",
			"99.17355345776761807734577510193144055953671421275124588048685323695843110898865828921107999640579875261345201158007",
			"0.108", "1.1944", "2.34992", "3.629856", "4.11337408", "5.204073344", "6.3673320192", "7.66119763456",
			"8.1190155742208", "9.21422803359744", "10.385610460475392", "11.6940988288557056", "12.124937789194027008",
			"13.2248880205492486144", "14.40479843698864750592", "15.728637186579565510656",
			"16.13115469358432179191808", "17.236078448451779225452544", "18.4249412072132026058145792",
			"19.76489417298376469046624256", "20.1376809511370776442839236608", "21.24782571204673975971106258944",
			"22.446086281684131567479912660992", "23.8029553070314368214638427897856",
			"24.144531955265658627863491702161408", "25.2601575194781855301542850638905344",
			"26.46828353506073395427771311500296192", "27.842910363109321117699883607005331456",
			"28.15172386535967780118597904926095966208", "29.273102957647420042134762288669727391744",
			"30.4915853237653560758425721196055093051392", "31.88485358277764093651662981528991674925056",
			"32.1592736448999753685729933667521850148651008", "33.28669256081995566343138806015393302675718144",
			"34.516046609475920194176498508277079448162926592", "35.9288838970566563495176973148987430066932678656",
			"36.167199101470198142913185516681773741204788215808",
			"37.3009583826463566572437339300271927341686187884544",
			"38.54172508876344198303872107404894692150351381921792",
			"39.975105159774195569469697933288104458706324874592256",
			"40.17551892875935520250454562799185880256713847742660608",
			"41.315934071766839364508182130385345844620849259367890944",
			"42.5686813291803108561147278346936225203175286668622036992",
			"43.102362639252455954100651010244852053657155160035196665856",
			"44.1842527506544207173811718184407336965828792880633539985408",
			"45.33165495117795729128610927319332065384918271851403719737344",
			"46.596978912120323124314996691747977176928528893325266955272192",
			"47.10745620418165816237669940451463589184713520079854805194899456",
			"48.193421167526984692278058928126344605324843361437386493508190208",
			"49.3481581015485724461005060706274202895847180505872956883147423744",
			"50.62668458278743040298091092712935652125249249105713223896653627392",
			"51.1128032249017374725365639668832841738254486483902838030139765293056",
			"52.20304580482312745056581514038991151288580756710251084542515775275008",
			"53.365482448681629411018467252701840723194453620784519521765283954950144",
			"54.6578684076269329398332410548633133017500165174121351391775111189102592",
			"55.118416313372847929169983389875396394315002973134184325051952001403846656",
			"56.2131493640711262725059701017757135097670053516415317850935136025269239808",
			"57.38366885532802729051074618319628431758060963295475721316832448454846316544",
			"58.690603939590449122919343129753311771645097339318562983702984072187233697792",
			"59.12430870912628084212548176335559611889611752107734133706653713299370206560256",
			"60.223755676427305515825867174040073014013011537939214406719766839388663718084608",
			"61.4027602175691499284865609132721314252234207682905859320955803108995946925522944",
			"62.72496839162446987127580964388983656540215738292305467777204455961927044659412992",
			"63.1304943104924045768296457359001705817723883289261498419989680207314686803869433856",
			"64.23488975888632823829336232462030704719029899206706971559814243731664362469649809408",
			"65.422801565995390828928052184316552684942538185720725488076656387169958524453696569344",
			"66.7610428187917034920704939317697948328965687342973058785379814969059253440166538248192",
			"67.136987707382506628572688907718563069921382372173515058136836669443066561922997688467456",
			"68.2465778732885119314308400338934135258584882699123271046463060049975198114613958392414208",
			"69.44384017191932147657551206100814434654527888584218878836335080899553566063051251063455744",
			"70.798912309454778657835921709814659823781501994515939819054031456191964189134922519142203392",
			"71.14380421570186015841046590776663876828067035901286916742972566211455355404428605344559661056",
			"72.258847588263348285138838633979949782905206646223164501373506191806196397279714896202073899008",
			"73.4659256588740269132499095411639096092293719632016961024723111452511535151034868131637330182144",
			"74.83866618597324844384983717409503729661286953376305298445016006145207632718627626369471943278592",
			"75.1509599134751847198929706913371067133903165160773495372010288110613737388935297274650494979014656",
			"76.27172784425533249580734724440679208410256972893922916696185185991047273000835350943708909622263808",
			"77.489110119659598492453225039932225751384625512090612500531333347838850914015036316986760373200748544",
			"78.8803982153872772864158050718780063524923259217631025009564000261099316452270653705761686717613473792",
			"79.158471678769709911554844912938041143448618665917358450172152004699787696140871766703710360917042528256",
			"80.2852490217854778407987208432884740582075135986512452103098736084596178530535691800666786496506765508608",
			"81.51344823921386011343769751791925330477352447757224137855777249522731213549642452412002156937121779154944",
			"82.924206830584948204187855532254655948592344059630034481403990491409161843893564143416038824868192024788992",
			"83.16635722950529067675381399580583807074662193073340620665271828845364913190084154581488698847627456446201856",
			"84.299443013109523218156865192450508527343919475320131171974892919216568437421514782466796579257294216031633408",
			"85.5389974235971417926823573464109153492190550555762361095548072545898231873587266084402338426631295888569401344",
			"86.97019536247485522682824322353964762859429910003722499719865305826168173724570789519242091679363325994249224192",
			"87.1746351652454739408290837802371365731469738380067004994957575504871027127042274211346357650228539867896486035456",
			"88.31434329744185309349235080442684583166455290841206089909236359087678488286760935804234437704113717622136748638208",
			"89.565817935395335568286231447968322496996195235141709618366254463578212789161696844476219878674046917198461475487744",
			"90.10184722837116040229152166063429804945931514232550773130592580344407830204910543200571957816132844509572306558779392",
			"91.183325011068088724124738989141736489026767256185913916350666446199340943688389777610295240690391201172301518058029056",
			"92.3299850199225597034245301804551256802481810611346450494311996031588136986391015996985314332427041621101427325044523008",
			"93.59397303586060746616415432481922622444672591004236108897615928568586465755038287945735657983686749179825691850801414144",
			"94.1069151464549093439095477784674607204004106638076249960157086714234556383590689183023241843706361485236862453314425454592",
			"95.19244726361883681903718600124142929672073919485372499282827560856222014904632405294418353186714506734263524159659658182656",
			"96.346405074513906274266934802234572734097330550736704987090896095411996268283383295299530357360861121216743434873873847287808",
			"97.6235291341250312936804826440222309213751949913260689767636129717415932829100899315391546432495500181901381827729729251180544",
			"98.112235244142505632862486875924001565847535098438692415817450334913486790923816187677047835784919003274224872899135126521249792",
			"99.2020234394565101391524763766632028185255631771896463484714106028442762236628691378186861044128542058936047712184432277382496256" };

	static String sLongOK = "\n0 -1 18446744073709551615 18446744073709551615 20  true\n"
			+ "1 -2 18446744073709551614 18446744073709551614 20  true\n"
			+ "2 -4 18446744073709551612 18446744073709551612 20  true\n"
			+ "3 -8 18446744073709551608 18446744073709551608 20  true\n"
			+ "4 -16 18446744073709551600 18446744073709551600 20  true\n"
			+ "5 -32 18446744073709551584 18446744073709551584 20  true\n"
			+ "6 -64 18446744073709551552 18446744073709551552 20  true\n"
			+ "7 -128 18446744073709551488 18446744073709551488 20  true\n"
			+ "8 -256 18446744073709551360 18446744073709551360 20  true\n"
			+ "9 -512 18446744073709551104 18446744073709551104 20  true\n"
			+ "10 -1024 18446744073709550592 18446744073709550592 20  true\n"
			+ "11 -2048 18446744073709549568 18446744073709549568 20  true\n"
			+ "12 -4096 18446744073709547520 18446744073709547520 20  true\n"
			+ "13 -8192 18446744073709543424 18446744073709543424 20  true\n"
			+ "14 -16384 18446744073709535232 18446744073709535232 20  true\n"
			+ "15 -32768 18446744073709518848 18446744073709518848 20  true\n"
			+ "16 -65536 18446744073709486080 18446744073709486080 20  true\n"
			+ "17 -131072 18446744073709420544 18446744073709420544 20  true\n"
			+ "18 -262144 18446744073709289472 18446744073709289472 20  true\n"
			+ "19 -524288 18446744073709027328 18446744073709027328 20  true\n"
			+ "20 -1048576 18446744073708503040 18446744073708503040 20  true\n"
			+ "21 -2097152 18446744073707454464 18446744073707454464 20  true\n"
			+ "22 -4194304 18446744073705357312 18446744073705357312 20  true\n"
			+ "23 -8388608 18446744073701163008 18446744073701163008 20  true\n"
			+ "24 -16777216 18446744073692774400 18446744073692774400 20  true\n"
			+ "25 -33554432 18446744073675997184 18446744073675997184 20  true\n"
			+ "26 -67108864 18446744073642442752 18446744073642442752 20  true\n"
			+ "27 -134217728 18446744073575333888 18446744073575333888 20  true\n"
			+ "28 -268435456 18446744073441116160 18446744073441116160 20  true\n"
			+ "29 -536870912 18446744073172680704 18446744073172680704 20  true\n"
			+ "30 -1073741824 18446744072635809792 18446744072635809792 20  true\n"
			+ "31 -2147483648 18446744071562067968 18446744071562067968 20  true\n"
			+ "32 -4294967296 18446744069414584320 18446744069414584320 20  true\n"
			+ "33 -8589934592 18446744065119617024 18446744065119617024 20  true\n"
			+ "34 -17179869184 18446744056529682432 18446744056529682432 20  true\n"
			+ "35 -34359738368 18446744039349813248 18446744039349813248 20  true\n"
			+ "36 -68719476736 18446744004990074880 18446744004990074880 20  true\n"
			+ "37 -137438953472 18446743936270598144 18446743936270598144 20  true\n"
			+ "38 -274877906944 18446743798831644672 18446743798831644672 20  true\n"
			+ "39 -549755813888 18446743523953737728 18446743523953737728 20  true\n"
			+ "40 -1099511627776 18446742974197923840 18446742974197923840 20  true\n"
			+ "41 -2199023255552 18446741874686296064 18446741874686296064 20  true\n"
			+ "42 -4398046511104 18446739675663040512 18446739675663040512 20  true\n"
			+ "43 -8796093022208 18446735277616529408 18446735277616529408 20  true\n"
			+ "44 -17592186044416 18446726481523507200 18446726481523507200 20  true\n"
			+ "45 -35184372088832 18446708889337462784 18446708889337462784 20  true\n"
			+ "46 -70368744177664 18446673704965373952 18446673704965373952 20  true\n"
			+ "47 -140737488355328 18446603336221196288 18446603336221196288 20  true\n"
			+ "48 -281474976710656 18446462598732840960 18446462598732840960 20  true\n"
			+ "49 -562949953421312 18446181123756130304 18446181123756130304 20  true\n";

//	private static void testSquare() {
//		System.out.println("testSquare");
//		BigInteger m = new BigInteger(
//				"2582248646774490172124085712888104546427167222226810472718877943316781043330129979932998020933713905804029623515616378881");
//		for (int i = 0; i < 3; i++) {
//			System.out.println("m=" + m);
//			String s = m.square().toString();
//			String t = (m = m.multiply(m)).toString();
//			assert (s.equals(t));
//			m = m.multiply(m);
//		}
//		System.out.println("testSquare OK");
//	}
//
//	private static void testInverseMod() {
//		System.out.println("testInverseMod");
//		for (int n = 1; n < 40; n += 2) {
//			int v = MutableBigInteger.inverseMod32(n);
//			assert (((n * v) | 0) == 1);
//		}
//		System.out.println("testInverseMod OK");
//	}
//
//	private static void testDiv3() {
//		System.out.println("testDiv3");
//		BigInteger m = BigInteger.valueOf(9);
//		BigInteger three = BigInteger.valueOf(3);
//		for (int i = 0; i < 100; i++) {
//			System.out.println(m + " " + m.exactDivideBy3());
//			assert (m.exactDivideBy3().multiply(three).equals(m));
//			m = m.multiply(three);
//		}
//		System.out.println("testDiv3 OK");
//	}
//
}
